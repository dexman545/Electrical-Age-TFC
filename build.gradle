buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

apply plugin: 'forge'
apply plugin: 'de.undercouch.download'

def mapUrl = 'https://github.com/Dolu1990/ElectricalAge/releases/download/BETA-1.9/ElectricalAge_tutorialMap_BETA-1.9_r41.zip'

def getVersion() {
    // FIXME: cannot import 'mods.eln.misc.Version' class here ?
    def version_major = 1
    def version_minor = 9
    def version_revision = 47
    def version_TFC = 5

    return "$version_major.${version_minor}_r$version_revision-TFC_r$version_TFC" // 1.9_r47
}

group = "com.Miaou.Eln" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "[1.7.10]ElectricalAge_BETA"
version = getVersion()

sourceSets {
    main {
        java { srcDirs = ["$projectDir/src/main/java"] }
        resources { srcDirs = ["$projectDir/src/main/resources/"] }
    }
}

minecraft {
    version = "1.7.10-10.13.2.1291"
    runDir = "run"

    srgExtra "PK: org/apache/commons/math3 mods/eln/libs/org/apache/commons/math3"
    srgExtra "PK: com/serotonin mods/eln/libs/com/serotonin"
    srgExtra "PK: gnu/io mods/eln/libs/gnu/io"
}



configurations {
    external
    compile.extendsFrom external
}

dependencies {
    external files("libs/commons-math3-3.3.jar", "libs/modbus4J.jar", "libs/seroUtils.jar")
}

jar {
    from { configurations.external.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude(['dan200/**', 'ic2/**', 'li/**', 'buildcraft/**'])
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    from('src/main/java') {
        exclude '**/*.java'
        exclude '**/*.blend'
        exclude '**/*.blend1'
        exclude '**/*.blend2'
        exclude '**/*.rar'
        exclude '**/*.wav'
        exclude '**/*.m_p'
        exclude '**/*.ai'
    }
}

clean{
    // Saves are NOT deleted
    delete(minecraft.runDir + "/logs")
    delete(minecraft.runDir + "/crash-reports")
}

def getMinecratfDir() {
    String outDir = ""
    final String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains('windows'))
        outDir = System.getenv("APPDATA") + "/.minecraft"
    else if (osName.contains('os x'))
        outDir = System.getProperty("user.home") + "/Library/Application Support/minecraft"
    else if (osName.contains('linux'))
        outDir = System.getProperty("user.home") + "/.minecraft"
    return outDir
}

// Custom task to build and copy the mod Jar to the default local Minecraft folder
task buildAndCopyJar(dependsOn: 'build', type: Copy) {
    outputs.upToDateWhen { false } // Force to run this task
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // Overwrite the file if exists

    from("build/libs")
    into(getMinecratfDir() + "/mods")
    include("*.jar")
}

import de.undercouch.gradle.tasks.download.Download

// Download the tutorial map as a zip file to the local 'run/saves' folder
task downloadTutoMap(type: Download) {
    src(mapUrl)
    dest(new File(minecraft.runDir + "/saves", mapUrl.substring(mapUrl.lastIndexOf("/") + 1, mapUrl.length())))
    overwrite true
}

// Unzip the local tutorial map after downloading it. Overwrite the map content if already exist
task unzipTutoMap(dependsOn: downloadTutoMap, type: Copy) {
    outputs.upToDateWhen { false } // Force to run this task

    from zipTree(downloadTutoMap.dest)
    into(minecraft.runDir + "/saves")
}